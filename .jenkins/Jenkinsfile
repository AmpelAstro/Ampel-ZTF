pipeline {
  agent none
  stages {
    stage('dependencies') {
      agent any
      steps {
          dir(path: '.jenkins/Ampel-interface') {
            git(url: 'https://github.com/AmpelProject/Ampel-interface', credentialsId: 'github')
          }
          dir(path: '.jenkins/Ampel-core') {
            git(url: 'https://github.com/AmpelProject/Ampel-core', credentialsId: 'github')
          }
          dir(path: '.jenkins/Ampel-alerts') {
            git(url: 'https://github.com/AmpelProject/Ampel-alerts', credentialsId: 'github')
          }
          dir(path: '.jenkins/Ampel-photometry') {
            git(url: 'https://github.com/AmpelProject/Ampel-photometry', credentialsId: 'github')
          }
      }
    }
    stage('build') {
      agent {
        dockerfile {
          filename '.jenkins/Dockerfile.build'
        }
      }
      steps {
        sh 'rm mypy.*.xml || true'
        sh 'run_mypy.sh ampel'
      }
      post {
        always {
          junit 'mypy.*.xml'
        }
      }
    }
    stage('test') {
      agent any
      steps {
        dir(path: '.jenkins/Ampel-deploy') {
          git(url: 'https://github.com/AmpelProject/Ampel-deploy', credentialsId: 'github')
        }
        script {
          def tester = docker.build("test-image", ". -f .jenkins/Dockerfile.build")
          def postgres = docker.image("ampelproject/postgres:10.6")
          postgres.withRun(
            " -e 'POSTGRES_USER=ampel'"+
            " -e 'POSTGRES_DB=ztfarchive'"+
            " -e 'ARCHIVE_READ_USER=archive-readonly'"+
            " -e 'ARCHIVE_WRITE_USER=ampel-client'"+
            " -v '${workspace}/.jenkins/Ampel-deploy/production/initdb/archive:/docker-entrypoint-initdb.d/'"
            ) { archive ->
            postgres.inside(
              "--link ${archive.id}:postgres"
            ) {
              sh '#!/bin/sh\nfor _ in $(seq 1 60); do if pg_isready -U ampel -h ${POSTGRES_PORT_5432_TCP_ADDR} -p ${POSTGRES_PORT_5432_TCP_PORT}; then break; fi; sleep 1; done'
            } 
            tester.inside(
              " --link ${archive.id}:_archive"+
              " -v ${workspace}:/workspace"
            ) {
              sh '#!/bin/sh\n env | sort'
              sh '#!/bin/sh\n rm /workspace/*.xml || true'
              sh '#!/bin/sh\n'+
              'export ARCHIVE_HOSTNAME=${_ARCHIVE_PORT_5432_TCP_ADDR}\n'+
              'export ARCHIVE_PORT=${_ARCHIVE_PORT_5432_TCP_PORT}\n'+
              'pytest ampel/ztf/test --junitxml=/workspace/pytest.xml'
            }
          }
        }
      }
      post {
        always {
          junit(testResults: '*.xml', allowEmptyResults: true)
        }
      }
    }
  }
}
